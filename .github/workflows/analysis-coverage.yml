name: Analysis & Coverage

on:
  pull_request:
    branches: [master]
    types: [opened, reopened, edited]
    paths:
      - 'pillow_heif/*.py'
      - 'tests/**'
      - 'setup.*'
      - 'pyproject.toml'
  push:
    branches: [master]
    paths:
      - 'pillow_heif/*.py'
      - 'tests/**'
      - 'setup.*'
      - 'pyproject.toml'
  workflow_dispatch:

jobs:
  analysis:
    runs-on: ubuntu-22.04
    name: Analysis
    if: "!contains(github.event.head_commit.message, '[docs]')"

    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Prepare system
        run: sudo apt -y install libheif-dev

      - name: Install from source
        run: python3 -m pip -v install ".[dev]"

      - name: Pylint Analysis
        run: pylint pillow_heif

#  coverage-linux:
#    needs: [analysis]
#    runs-on: ubuntu-22.04
#    name: Coverage(Linux)
#
#    steps:
#      - uses: actions/checkout@v3
#
#      - uses: actions/setup-python@v4
#        with:
#          python-version: '3.8'
#
#      - name: Prepare system
#        run: |
#          sudo apt -y install libheif-dev
#          python3 -m pip install pytest coverage numpy pillow==8.3.0
#
#      - name: Install from source
#        run: python3 -m pip -v install .
#
#      - name: Generate coverage report
#        run: coverage run -m pytest -s && coverage xml && coverage html
#
#      - name: HTML coverage to artifacts
#        uses: actions/upload-artifact@v3
#        with:
#          name: coverage_linux
#          path: ./htmlcov
#          if-no-files-found: error
#
#      - name: Upload report to Codecov
#        uses: codecov/codecov-action@v3
#        with:
#          file: ./coverage.xml
#          fail_ci_if_error: true
#          verbose: true
#
#  coverage-macos:
#    needs: [analysis]
#    runs-on: macos-12
#    name: Coverage(macOS)
#
#    steps:
#      - uses: actions/checkout@v3
#
#      - uses: actions/setup-python@v4
#        with:
#          python-version: '3.10'
#
#      - name: Prepare system
#        run: |
#          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
#          brew install libheif
#
#      - name: Install from source
#        run: |
#          python3 -m pip install opencv-python coverage
#          python3 -m pip -v install ".[tests]"
#
#      - name: Generate coverage report
#        run: coverage run -m pytest -s && coverage xml && coverage html
#
#      - name: HTML coverage to artifacts
#        uses: actions/upload-artifact@v3
#        with:
#          name: coverage_macos
#          path: ./htmlcov
#          if-no-files-found: error
#
#      - name: Upload report to Codecov
#        uses: codecov/codecov-action@v3
#        with:
#          file: ./coverage.xml
#          fail_ci_if_error: true
#          verbose: true

  coverage-windows:
    needs: [analysis]
    runs-on: windows-2022
    name: Coverage(Windows)
    env:
      MSYS2_PREFIX: "C:/temp/msys64/mingw64"

    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - uses: msys2/setup-msys2@v2
        with:
          location: C:/temp
          install: >-
            mingw-w64-x86_64-libheif

      - name: Copy DLLs from MSYS2
        run: |
          $site_packages=(python -c 'import sysconfig; print(sysconfig.get_paths()[\"platlib\"])')
          cp ${{ env.MSYS2_PREFIX }}/bin/libheif.dll $site_packages/
          cp ${{ env.MSYS2_PREFIX }}/bin/libde265-0.dll $site_packages/
          cp ${{ env.MSYS2_PREFIX }}/bin/libx265.dll $site_packages/
          cp ${{ env.MSYS2_PREFIX }}/bin/libaom.dll $site_packages/
          cp ${{ env.MSYS2_PREFIX }}/bin/libwinpthread-1.dll $site_packages/
          cp ${{ env.MSYS2_PREFIX }}/bin/libgcc_s_seh-1.dll $site_packages/
          cp ${{ env.MSYS2_PREFIX }}/bin/libstdc++-6.dll $site_packages/

      - name: Install from source
        run: |
          python -m pip install opencv-python coverage pillow==8.1.0
          python -m pip -v install ".[tests]"

      - name: Generate coverage report
        run: coverage run -m pytest -s && coverage xml && coverage html

      - name: HTML coverage to artifacts
        uses: actions/upload-artifact@v3
        with:
          name: coverage_windows
          path: ./htmlcov
          if-no-files-found: error

      - name: Upload report to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: true
          verbose: true
