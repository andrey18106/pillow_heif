name: Analysis & Coverage

on:
  pull_request:
    branches: [master]
    types: [opened, reopened, edited]
  push:
    branches: [master]
  workflow_dispatch:

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      py_src: ${{ steps.filter.outputs.py_src }}
    steps:
    - uses: actions/checkout@v3
    - uses: dorny/paths-filter@v2
      id: filter
      with:
        base: ${{ github.ref }}
        filters: |
          py_src:
            - 'pillow_heif/*.py'
            - 'libheif/*.py'
            - 'setup.py'
            - 'tests/*.py'

  build-analysis:
    needs: [changes]
    if: ${{ needs.changes.outputs.py_src == 'true' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    name: Analysis & Coverage
    steps:
      - uses: actions/checkout@v3
      - name: Prepare for source install
        run: |
          sudo -H python3 -m pip install --upgrade pip
          sudo -H python3 -m pip install -r requirements.txt
          sudo -H python3 -m pip install -r requirements_dev.txt
          sudo -H python3 -m pip install install pylint

      - name: Install from source
        run: sudo -H python3 -m pip -v install .

      - name: Pylint Analysis
        run: pylint --rcfile .pylintrc pillow_heif

      - name: Generate coverage report
        run: coverage run --rcfile=pyproject.toml -m pytest && coverage xml

      - name: Upload coverage to artifacts
        uses: actions/upload-artifact@v3
        with:
          name: coverage
          path: ./coverage.xml
          if-no-files-found: error

      - name: Upload report to Codecov
        uses: codecov/codecov-action@v2
        with:
          file: ./coverage.xml
          fail_ci_if_error: true
          verbose: true

  checks_status:
    needs: [changes, build-analysis]
    if: ${{ always() && contains(needs.*.result, 'success') && !(contains(needs.*.result, 'failure')) }}
    name: checks-status
    runs-on: ubuntu-latest
    steps:
      - name: Checks passed
        run: echo "Checks passed"
