name: Build cache for dependecies

on:
  workflow_dispatch:

jobs:
  dependencies_linux:
    strategy:
      fail-fast: true
      matrix:
        cibw_buildlinux: [ manylinux, musllinux ]
        cibw_arch: [ "x86_64", "aarch64" ]
    name: ${{ matrix.cibw_arch }} â€¢ ${{ matrix.cibw_buildlinux }}
    runs-on: ubuntu-20.04
    env:
      BUILD_STUFF: "/build-stuff"
      SCRIPTS: "./build_scripts/linux/"
      BUILD_ORDER: "pkg-config,nasm,libde265,aom,libheif,libffi"
      KEY_HEAD: ${{ matrix.cibw_arch }}-${{ matrix.cibw_buildlinux }}

    steps:
      - uses: actions/checkout@v2
      - name: Set up QEMU
        if: matrix.cibw_arch == 'aarch64'
        uses: docker/setup-qemu-action@v1
        with:
          platforms: arm64

      - name: Preparations
        run: |
          sudo mkdir "$BUILD_STUFF" && sudo chmod 777 "$BUILD_STUFF"
          echo BUILD_STUFF_CMD="&& sh $(echo "$BUILD_ORDER" | sed 's/,/.sh \&\& sh /g').sh" >> $GITHUB_ENV
          python3 -m pip install cibuildwheel twine

      - name: manylinux2014 preparations
        if: matrix.cibw_buildlinux == 'manylinux'
        run: |
          echo BUILD_COMMAND="yum install -y -q $OS_PACKAGES && set -ex && cd $SCRIPTS $BUILD_STUFF_CMD" >> $GITHUB_ENV
          echo LDCONFIG_ARG="" >> $GITHUB_ENV
        env:
          OS_PACKAGES: "wget libtool git-all"

      - name: musllinux_1_1 preparations
        if: matrix.cibw_buildlinux == 'musllinux'
        run: |
          echo BUILD_COMMAND="apk --no-cache add -q $OS_PACKAGES && set -ex && cd $SCRIPTS $BUILD_STUFF_CMD" >> $GITHUB_ENV
          echo LDCONFIG_ARG="/usr/lib" >> $GITHUB_ENV
        env:
          OS_PACKAGES: "sudo py3-pip python3-dev libtool git \
          freetype-dev fribidi-dev harfbuzz-dev jpeg-dev lcms2-dev openjpeg-dev tiff-dev zlib-dev"

      - uses: actions/cache@v2
        with:
          path: ${{ env.BUILD_STUFF }}/${{ env.NAME }}
          key: ${{ env.KEY_HEAD }}-${{ hashFiles(format('{0}{1}.sh', env.SCRIPTS, env.NAME)) }}
        env:
          NAME: pkg-config

      - uses: actions/cache@v2
        with:
          path: ${{ env.BUILD_STUFF }}/${{ env.NAME }}
          key: ${{ env.KEY_HEAD }}-${{ hashFiles(format('{0}{1}.sh', env.SCRIPTS, env.NAME)) }}
        env:
          NAME: nasm

      - uses: actions/cache@v2
        with:
          path: ${{ env.BUILD_STUFF }}/${{ env.NAME }}
          key: ${{ env.KEY_HEAD }}-${{ hashFiles(format('{0}{1}.sh', env.SCRIPTS, env.NAME)) }}
        env:
          NAME: libde265

      - uses: actions/cache@v2
        with:
          path: ${{ env.BUILD_STUFF }}/${{ env.NAME }}
          key: ${{ env.KEY_HEAD }}-${{ hashFiles(format('{0}{1}.sh', env.SCRIPTS, env.NAME)) }}
        env:
          NAME: aom

      - uses: actions/cache@v2
        with:
          path: ${{ env.BUILD_STUFF }}/${{ env.NAME }}
          key: ${{ env.KEY_HEAD }}-${{ hashFiles(format('{0}{1}.sh', env.SCRIPTS, env.NAME)) }}
        env:
          NAME: libheif

      - uses: actions/cache@v2
        with:
          path: ${{ env.BUILD_STUFF }}/${{ env.NAME }}
          key: ${{ env.KEY_HEAD }}-${{ hashFiles(format('{0}{1}.sh', env.SCRIPTS, env.NAME)) }}
        env:
          NAME: libffi

      - name: Start test build
        run: cibuildwheel
        env:
          CIBW_BUILD: ${{ format('cp38-{0}*', matrix.cibw_buildlinux) }}
          CIBW_ARCHS: ${{ matrix.cibw_arch }}
          CIBW_BEFORE_ALL: ${{ env.BUILD_COMMAND }}
          CIBW_ENVIRONMENT_PASS_LINUX: BUILD_STUFF LDCONFIG_ARG
          CIBW_TEST_SKIP: "*"

      - name: Check builded wheel
        run: twine check wheelhouse/*

      - name: Upload builded wheel
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: wheelhouse/*.whl
          if-no-files-found: error
