name: Build dependecies

on:
  workflow_dispatch:

jobs:
  dependencies_linux:
    strategy:
      fail-fast: true
      matrix:
        include:
          - runs-on: ubuntu-latest
            cibw-arch: manylinux_x86_64
#          - runs-on: ubuntu-latest
#            cibw-arch: manylinux_aarch64
    name: Dependecies â€¢ ${{ matrix.cibw-arch }}
    runs-on: ${{ matrix.runs-on }}
    env:
      BUILD_STUFF: "/build-stuff"
      SCRIPTS: "./build_scripts/linux/"
      BUILD_ORDER: "pkg-config,cmake,autoconf,automake,libressl,nasm,libde265,libheif,libffi"
      OS_PACKAGES: "wget libtool git-all"
# ,aom

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Make preparations
        run: |
          sudo mkdir "$BUILD_STUFF" && sudo chmod 777 "$BUILD_STUFF"
          BUILD_STUFF_CMD=&& sh $(echo "$BUILD_ORDER" | sed 's/,/.sh \&\& sh /g').sh
          echo BUILD_COMMAND="yum install -y -q $OS_PACKAGES && set -ex && cd $SCRIPTS$BUILD_STUFF_CMD"
# >> $GITHUB_ENV
#
#      - uses: actions/cache@v2
#        with:
#          path: ${{ env.BUILD_STUFF }}/${{ env.NAME }}
#          key: ${{ matrix.runs-on }}${{ matrix.cibw-arch }}${{ hashFiles(format('{0}{1}{2}', env.SCRIPTS, env.NAME, '.sh')) }}
#        env:
#          NAME: pkg-config
#
#      - uses: actions/cache@v2
#        with:
#          path: ${{ env.BUILD_STUFF }}/${{ env.NAME }}
#          key: ${{ matrix.runs-on }}${{ matrix.cibw-arch }}${{ hashFiles(format('{0}{1}{2}', env.SCRIPTS, env.NAME, '.sh')) }}
#        env:
#          NAME: cmake
#
#      - uses: actions/cache@v2
#        with:
#          path: ${{ env.BUILD_STUFF }}/${{ env.NAME }}
#          key: ${{ matrix.runs-on }}${{ matrix.cibw-arch }}${{ hashFiles(format('{0}{1}{2}', env.SCRIPTS, env.NAME, '.sh')) }}
#        env:
#          NAME: autoconf
#
#      - uses: actions/cache@v2
#        with:
#          path: ${{ env.BUILD_STUFF }}/${{ env.NAME }}
#          key: ${{ matrix.runs-on }}${{ matrix.cibw-arch }}${{ hashFiles(format('{0}{1}{2}', env.SCRIPTS, env.NAME, '.sh')) }}
#        env:
#          NAME: automake
#
#      - uses: actions/cache@v2
#        with:
#          path: ${{ env.BUILD_STUFF }}/${{ env.NAME }}
#          key: ${{ matrix.runs-on }}${{ matrix.cibw-arch }}${{ hashFiles(format('{0}{1}{2}', env.SCRIPTS, env.NAME, '.sh')) }}
#        env:
#          NAME: libressl
#
#      - uses: actions/cache@v2
#        with:
#          path: ${{ env.BUILD_STUFF }}/${{ env.NAME }}
#          key: ${{ matrix.runs-on }}${{ matrix.cibw-arch }}${{ hashFiles(format('{0}{1}{2}', env.SCRIPTS, env.NAME, '.sh')) }}
#        env:
#          NAME: nasm
#
#      - uses: actions/cache@v2
#        with:
#          path: ${{ env.BUILD_STUFF }}/${{ env.NAME }}
#          key: ${{ matrix.runs-on }}${{ matrix.cibw-arch }}${{ hashFiles(format('{0}{1}{2}', env.SCRIPTS, env.NAME, '.sh')) }}
#        env:
#          NAME: libde265
#
#      - uses: actions/cache@v2
#        with:
#          path: ${{ env.BUILD_STUFF }}/${{ env.NAME }}
#          key: ${{ matrix.runs-on }}${{ matrix.cibw-arch }}${{ hashFiles(format('{0}{1}{2}', env.SCRIPTS, env.NAME, '.sh')) }}
#        env:
#          NAME: aom
#
#      - uses: actions/cache@v2
#        with:
#          path: ${{ env.BUILD_STUFF }}/${{ env.NAME }}
#          key: ${{ matrix.runs-on }}${{ matrix.cibw-arch }}${{ hashFiles(format('{0}{1}{2}', env.SCRIPTS, env.NAME, '.sh')) }}
#        env:
#          NAME: libheif
#
#      - uses: actions/cache@v2
#        with:
#          path: ${{ env.BUILD_STUFF }}/${{ env.NAME }}
#          key: ${{ matrix.runs-on }}${{ matrix.cibw-arch }}${{ hashFiles(format('{0}{1}{2}', env.SCRIPTS, env.NAME, '.sh')) }}
#        env:
#          NAME: libffi
#
#      - name: Set up QEMU
#        if: matrix.cibw-arch == 'manylinux_aarch64'
#        uses: docker/setup-qemu-action@v1
#        with:
#          platforms: arm64
#
#      - name: x64 linux pre configure enviroment
#        if: matrix.cibw-arch == 'manylinux_x86_64'
#        run: |
#          echo "CIBW_ARCHS=x86_64" >> $GITHUB_ENV
#          echo "CIBW_MANYLINUX_X86_64_IMAGE=manylinux2014" >> $GITHUB_ENV
#          echo "CIBW_BUILD=cp38-manylinux_x86_64" >> $GITHUB_ENV
#
#      - name: Arm linux pre configure enviroment
#        if: matrix.cibw-arch == 'manylinux_aarch64'
#        run: |
#          echo "CIBW_ARCHS=aarch64" >> $GITHUB_ENV
#          echo "CIBW_BUILD=cp38-manylinux_aarch64" >> $GITHUB_ENV
#
#      - name: Start test build
#        run: |
#          python -m pip install cibuildwheel twine
#          cibuildwheel
#        env:
#          CIBW_TEST_SKIP: "*"
#          CIBW_BEFORE_ALL: ${{ env.BUILD_COMMAND }}
#
#      - name: Check builded wheel
#        run: |
#          twine check wheelhouse/*
#
#      - name: Upload builded wheel
#        uses: actions/upload-artifact@v2
#        with:
#          name: wheels
#          path: wheelhouse/*.whl
#          if-no-files-found: error
