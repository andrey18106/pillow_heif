name: Create Release
#Note: Wheels for Apple M1 builds locally and uploaded manually for now.

on:
  workflow_dispatch:

jobs:
#  wheels_windows:
#    name: Wheels • windows • x86_64
#    runs-on: windows-2019
#    env:
#      VCPKG_PREFIX: "C:/vcpkg/installed/x64-windows"
#
#    steps:
#      - uses: actions/checkout@v3
#      - name: Install requirements and dependencies
#        run: |
#          python3 -m pip install cibuildwheel twine
#          vcpkg install aom libheif --triplet=x64-windows
#
#      - name: Run cibuildwheel
#        run: cibuildwheel
#        env:
#          CIBW_BUILD: "cp37-* cp38-* cp39-* cp310-*"
#          CIBW_ARCHS_WINDOWS: "AMD64"
#          CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: "delvewheel repair -v -w {dest_dir} {wheel} --add-path ${{ env.VCPKG_PREFIX }}/bin"
#
#      - name: Check built wheels
#        run: twine check wheelhouse/*
#
#      - name: Upload built wheels
#        uses: actions/upload-artifact@v3
#        with:
#          name: wheels
#          path: wheelhouse/*.whl
#          if-no-files-found: error

  wheels_macos:
    name: Wheels • macosx • x86_64
    runs-on: macos-11

    steps:
      - uses: actions/checkout@v3
      - name: Run cibuildwheel
        run: |
          python3 -m pip install cibuildwheel twine
          cibuildwheel
        env:
          CIBW_BUILD: "*-macosx_x86_64"
#          CIBW_SKIP: "cp36-*"
          CIBW_SKIP: "cp*"

      - name: Check built wheels
        run: twine check wheelhouse/*

      - name: Upload built wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: wheelhouse/*.whl
          if-no-files-found: error

  wheels_linux:
    strategy:
      fail-fast: true
      matrix:
#        cibw_buildlinux: [ manylinux, musllinux ]
        cibw_buildlinux: [ manylinux ]
        cibw_arch: [ "aarch64", "i686", "x86_64" ]
#        cibw_build: [ "cp36", "cp37", "cp38", "cp39", "cp310", "pp37", "pp38" ]
        cibw_build: [ "pp37", "pp38" ]
#        exclude:
#          - cibw_buildlinux: musllinux
#            cibw_build: pp37
#          - cibw_buildlinux: musllinux
#            cibw_build: pp38
    name: Wheels • ${{ matrix.cibw_buildlinux }} • ${{ matrix.cibw_arch }} • ${{ matrix.cibw_build }}
    runs-on: ubuntu-20.04
    env:
      BUILD_DIR_PREFIX: "/tmp/pillow_heif"
      KEY_HEAD: ${{ matrix.cibw_arch }}-${{ matrix.cibw_buildlinux }}

    steps:
      - uses: actions/checkout@v3
      - name: Set up QEMU
        if: matrix.cibw_arch == 'aarch64'
        uses: docker/setup-qemu-action@v1
        with:
          platforms: arm64

      - name: Install cibuildwheel & twine
        run: python3 -m pip install cibuildwheel twine

      - name: manylinux preparations
        if: matrix.cibw_buildlinux == 'manylinux'
        run: echo INSTALL_OS_PACKAGES="yum makecache && yum install -y $OS_PACKAGES" >> $GITHUB_ENV
        env:
          OS_PACKAGES: "git-all libjpeg-turbo-devel lcms2-devel"

      - name: musllinux preparations
        if: matrix.cibw_buildlinux == 'musllinux'
        run: echo INSTALL_OS_PACKAGES="apk update && apk --no-cache add $OS_PACKAGES" >> $GITHUB_ENV
        env:
          OS_PACKAGES: "sudo py3-pip python3-dev fribidi-dev harfbuzz-dev jpeg-dev lcms2-dev openjpeg-dev"

      - uses: actions/cache@v3
        with:
          path: ${{ env.BUILD_DIR_PREFIX }}/build-tools
          key: ${{ env.KEY_HEAD }}-${{ hashFiles('libheif/*.py') }}

      - uses: actions/cache@v3
        with:
          path: ${{ env.BUILD_DIR_PREFIX }}/build-stuff
          key: ${{ env.KEY_HEAD }}-${{ hashFiles('libheif/*.*') }}

      - name: Run cibuildwheel
        run: cibuildwheel
        env:
          CIBW_BUILD: ${{ format('{0}-{1}_{2}', matrix.cibw_build , matrix.cibw_buildlinux, matrix.cibw_arch) }}
          CIBW_ARCHS: ${{ matrix.cibw_arch }}
          CIBW_BEFORE_ALL_LINUX: ${{ env.INSTALL_OS_PACKAGES }}
          CIBW_ENVIRONMENT_LINUX: BUILD_DIR_PREFIX=/host${{ env.BUILD_DIR_PREFIX }}

      - name: Check builded wheels
        run: twine check wheelhouse/*

      - name: Upload builded wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: wheelhouse/*.whl
          if-no-files-found: error

      - name: Fix cache permissions
        run: sudo chmod -R 777 ${{ env.BUILD_DIR_PREFIX }}

#  sdist:
#    name: Source distribution
#    runs-on: macos-11
#
#    steps:
#      - uses: actions/checkout@v3
#      - name: Install requirements
#        run: |
#          python3 -m pip install --upgrade pip
#          python3 -m pip install --user check-manifest twine
#
#      - name: Run check-manifest
#        run: python3 -m check_manifest
#
#      - name: Install brew
#        run: |
#          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
#          brew install x265 libjpeg libde265 libheif
#
#      - name: Build sdist
#        run: |
#          python3 -m pip install pytest piexif coverage pillow imagehash
#          python3 -m build --sdist --outdir wheelhouse
#
#      - name: Install and check sdist
#        run: |
#          python3 -m pip install --user wheelhouse/*.tar.gz
#          python3 -m twine check wheelhouse/*
#
#      - name: Generate coverage report
#        run: coverage run -m pytest && coverage xml
#
#      - name: Upload report to Codecov
#        uses: codecov/codecov-action@v2
#        with:
#          file: ./coverage.xml
#          fail_ci_if_error: true
#          verbose: true
#
#      - name: Upload sdist
#        uses: actions/upload-artifact@v3
#        with:
#          name: wheels
#          path: wheelhouse/*.tar.gz

#  draft_release:
#    needs: [sdist, wheels_linux, wheels_macos, wheels_windows]
#    runs-on: ubuntu-20.04
#    name: Build and create release
#
#    steps:
#      - uses: actions/checkout@v3
#      - name: Get release info
#        id: get_release_info
#        run: |
#          RELEASE_VERSION=$(sed -n "s/^__version__.*\"\(.*\)\"$/\\1/p" ./pillow_heif/_version.py)
#          echo "::set-output name=version::v${RELEASE_VERSION}"
#          echo "::set-output name=tag::v${RELEASE_VERSION}"
#          CHANGELOG=$(grep -oPz "(?s)##\s\[$RELEASE_VERSION.+?(?=##\s\[|$)" ./CHANGELOG.md | tr -d '\0' | sed /^$/d | sed '1d')
#          CHANGELOG=$(echo "$CHANGELOG" | sed '$!N;s/^###.*\n#/#/;P;D' | sed '$!N;s/^###.*\n#/#/;P;D' | sed '${/^###/d;}')
#          if [ "$CHANGELOG" == "" ]; then
#            echo "changelog is empty!"
#            exit 1
#          fi
#          echo "CHANGELOG<<EOF" >> $GITHUB_ENV
#          echo "$CHANGELOG" >> $GITHUB_ENV
#          echo "EOF" >> $GITHUB_ENV
#
#      - name: Collect sdist and wheels
#        uses: actions/download-artifact@v3
#        with:
#          name: wheels
#          path: wheelhouse
#
#      - name: Create release draft
#        uses: ncipollo/release-action@v1.8.8
#        with:
#          name: ${{ steps.get_release_info.outputs.version }}
#          tag: ${{ steps.get_release_info.outputs.tag }}
#          commit: ${{ github.ref }}
#          draft: true
#          body: ${{ env.CHANGELOG }}
#          artifacts: wheelhouse/*
#          token: ${{ secrets.GITHUB_TOKEN }}
#          artifactErrorsFailBuild: true
