name: Create Release
#Note: Wheels for Apple M1 builds locally and uploaded manually for now.

on:
  workflow_dispatch:

jobs:
#  wheels_windows:
#    strategy:
#      fail-fast: true
#      matrix:
#        include:
#          - runs-on: windows-latest
#            cibw-arch: AMD64
#    name: Wheels • ${{ matrix.cibw-arch }}
#    runs-on: ${{ matrix.runs-on }}
#
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v2
#        with:
#          submodules: recursive
#
#      - name: Setup Python
#        uses: actions/setup-python@v2
#        with:
#          python-version: '3.8'
#          architecture: ${{ matrix.python-arch }}
#
#      - name: Install requirements
#        run: |
#          python -m pip install cibuildwheel twine
#
#      - name: macOS x64 pre configure enviroment
#        if: matrix.cibw-arch == 'AMD64'
#        shell: cmd
#        run: |
#          echo "CIBW_ARCHS_WINDOWS=AMD64" >> $GITHUB_ENV
#
#      - name: Configure cibuildwheel
#        shell: cmd
#        run: |
#          echo "CIBW_BUILD=*-${{ matrix.cibw-arch }}" >> $GITHUB_ENV
#          echo "CIBW_SKIP=pp*" >> $GITHUB_ENV
#          echo "CIBW_TEST_REQUIRES=pytest piexif" >> $GITHUB_ENV
#          echo "CIBW_TEST_COMMAND=pytest {project}" >> $GITHUB_ENV
#
#      - name: Run cibuildwheel
#        run: |
#          cibuildwheel
#
#      - name: Check built wheels
#        run: |
#          twine check wheelhouse/*
#
#      - name: Upload built wheels
#        uses: actions/upload-artifact@v2
#        with:
#          name: wheels
#          path: wheelhouse/*.whl
#          if-no-files-found: error
#
  wheels_macos:
    strategy:
      fail-fast: true
      matrix:
        include:
          - runs-on: macos-11
            cibw-arch: macosx_x86_64
    name: Wheels • ${{ matrix.cibw-arch }}
    runs-on: ${{ matrix.runs-on }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'
          architecture: ${{ matrix.python-arch }}

      - name: macOS x64 pre configure enviroment
        if: matrix.cibw-arch == 'macosx_x86_64'
        run: |
          echo "CIBW_ARCHS_MACOS=x86_64" >> $GITHUB_ENV

      - name: Run cibuildwheel
        run: |
          python3 -m pip install cibuildwheel twine
          cibuildwheel
        env:
          CIBW_BUILD: ${{ format('*-{0}', matrix.cibw-arch) }}
          CIBW_SKIP: "pp* cp36-*"
          CIBW_TEST_COMMAND: "pytest {project}"
          CIBW_TEST_REQUIRES: "pytest piexif"
          CIBW_BUILD_VERBOSITY: 1

      - name: Check built wheels
        run: |
          twine check wheelhouse/*

      - name: Upload built wheels
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: wheelhouse/*.whl
          if-no-files-found: error

  wheels_linux:
    strategy:
      fail-fast: true
      matrix:
        include:
          - runs-on: ubuntu-latest
            cibw-arch: manylinux_x86_64
            many-linux: manylinux2014
          - runs-on: ubuntu-latest
            cibw-arch: manylinux_aarch64
            many-linux: manylinux2014
          - runs-on: ubuntu-latest
            cibw-arch: manylinux_x86_64
            many-linux: musllinux_1_1
          - runs-on: ubuntu-latest
            cibw-arch: manylinux_aarch64
            many-linux: musllinux_1_1
    name: Wheels • ${{ matrix.cibw-arch }} • ${{ matrix.many-linux }}
    runs-on: ${{ matrix.runs-on }}
    env:
      BUILD_STUFF: "/build-stuff"
      SCRIPTS: "./build_scripts/linux/"
      KEY_HEAD: ${{ matrix.cibw-arch }}-${{ matrix.many-linux }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: manylinux2014 preparations
        if: matrix.many-linux == 'manylinux2014'
        run: |
          sudo mkdir "$BUILD_STUFF" && sudo chmod 777 "$BUILD_STUFF"
          BUILD_STUFF_CMD="&& sh $(echo "$BUILD_ORDER" | sed 's/,/.sh \&\& sh /g').sh"
          echo BUILD_COMMAND="yum install -y -q $OS_PACKAGES && set -ex && cd $SCRIPTS $BUILD_STUFF_CMD" >> $GITHUB_ENV
          echo LDCONFIG_ARG="" >> $GITHUB_ENV
        env:
          BUILD_ORDER: "pkg-config,nasm,libde265,aom,libheif,libffi"
          OS_PACKAGES: "wget libtool git-all"

      - name: musllinux_1_1 preparations
        if: matrix.many-linux == 'musllinux_1_1'
        run: |
          sudo mkdir "$BUILD_STUFF" && sudo chmod 777 "$BUILD_STUFF"
          BUILD_STUFF_CMD="&& sh $(echo "$BUILD_ORDER" | sed 's/,/.sh \&\& sh /g').sh"
          echo BUILD_COMMAND="apk --no-cache add -q $OS_PACKAGES && set -ex && cd $SCRIPTS $BUILD_STUFF_CMD" >> $GITHUB_ENV
          echo LDCONFIG_ARG="/usr/lib" >> $GITHUB_ENV
        env:
          BUILD_ORDER: "nasm,aom,libffi,pkg-config,libde265,libheif"
          OS_PACKAGES: "sudo py3-pip python3-dev libtool git \
          freetype-dev fribidi-dev harfbuzz-dev jpeg-dev lcms2-dev openjpeg-dev tiff-dev zlib-dev"

      - uses: actions/cache@v2
        with:
          path: ${{ env.BUILD_STUFF }}/${{ env.NAME }}
          key: ${{ env.KEY_HEAD }}-${{ hashFiles(format('{0}{1}.sh', env.SCRIPTS, env.NAME)) }}
        env:
          NAME: pkg-config

#      - uses: actions/cache@v2
#        with:
#          path: ${{ env.BUILD_STUFF }}/${{ env.NAME }}
#          key: ${{ env.KEY_HEAD }}-${{ hashFiles(format('{0}{1}.sh', env.SCRIPTS, env.NAME)) }}
#        env:
#          NAME: cmake

#      - uses: actions/cache@v2
#        with:
#          path: ${{ env.BUILD_STUFF }}/${{ env.NAME }}
#          key: ${{ env.KEY_HEAD }}-${{ hashFiles(format('{0}{1}.sh', env.SCRIPTS, env.NAME)) }}
#        env:
#          NAME: autoconf

#      - uses: actions/cache@v2
#        with:
#          path: ${{ env.BUILD_STUFF }}/${{ env.NAME }}
#          key: ${{ env.KEY_HEAD }}-${{ hashFiles(format('{0}{1}.sh', env.SCRIPTS, env.NAME)) }}
#        env:
#          NAME: automake

#      - uses: actions/cache@v2
#        with:
#          path: ${{ env.BUILD_STUFF }}/${{ env.NAME }}
#          key: ${{ env.KEY_HEAD }}-${{ hashFiles(format('{0}{1}.sh', env.SCRIPTS, env.NAME)) }}
#        env:
#          NAME: libressl

      - uses: actions/cache@v2
        with:
          path: ${{ env.BUILD_STUFF }}/${{ env.NAME }}
          key: ${{ env.KEY_HEAD }}-${{ hashFiles(format('{0}{1}.sh', env.SCRIPTS, env.NAME)) }}
        env:
          NAME: nasm

      - uses: actions/cache@v2
        with:
          path: ${{ env.BUILD_STUFF }}/${{ env.NAME }}
          key: ${{ env.KEY_HEAD }}-${{ hashFiles(format('{0}{1}.sh', env.SCRIPTS, env.NAME)) }}
        env:
          NAME: libde265

      - uses: actions/cache@v2
        with:
          path: ${{ env.BUILD_STUFF }}/${{ env.NAME }}
          key: ${{ env.KEY_HEAD }}-${{ hashFiles(format('{0}{1}.sh', env.SCRIPTS, env.NAME)) }}
        env:
          NAME: aom

      - uses: actions/cache@v2
        with:
          path: ${{ env.BUILD_STUFF }}/${{ env.NAME }}
          key: ${{ env.KEY_HEAD }}-${{ hashFiles(format('{0}{1}.sh', env.SCRIPTS, env.NAME)) }}
        env:
          NAME: libheif

      - uses: actions/cache@v2
        with:
          path: ${{ env.BUILD_STUFF }}/${{ env.NAME }}
          key: ${{ env.KEY_HEAD }}-${{ hashFiles(format('{0}{1}.sh', env.SCRIPTS, env.NAME)) }}
        env:
          NAME: libffi

      - name: Set up QEMU
        if: matrix.cibw-arch == 'manylinux_aarch64'
        uses: docker/setup-qemu-action@v1
        with:
          platforms: arm64

      - name: x64 linux pre configure enviroment
        if: matrix.cibw-arch == 'manylinux_x86_64'
        run: |
          echo "CIBW_ARCHS=x86_64" >> $GITHUB_ENV

      - name: Arm linux pre configure enviroment
        if: matrix.cibw-arch == 'manylinux_aarch64'
        run: |
          echo "CIBW_ARCHS=aarch64" >> $GITHUB_ENV

      - name: Run cibuildwheel
        run: |
          python -m pip install cibuildwheel twine
          cibuildwheel
        env:
          CIBW_BEFORE_ALL: ${{ env.BUILD_COMMAND }}
          CIBW_ENVIRONMENT: BUILD_STUFF=${{ env.BUILD_STUFF }} LDCONFIG_ARG=${{ env.LDCONFIG_ARG }}
          CIBW_BUILD: ${{ format('*-{0}', matrix.cibw-arch) }}
          CIBW_SKIP: "pp* cp36-*"
          CIBW_TEST_COMMAND: "pytest {project}"
          CIBW_TEST_REQUIRES: "pytest piexif"
          CIBW_BUILD_VERBOSITY: 1
          CIBW_MANYLINUX_X86_64_IMAGE: ${{ matrix.many-linux }}
          CIBW_MANYLINUX_AARCH64_IMAGE: ${{ matrix.many-linux }}

      - name: Check builded wheels
        run: |
          twine check wheelhouse/*

      - name: Upload builded wheels
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: wheelhouse/*.whl
          if-no-files-found: error

  sdist:
    name: Source distribution
    runs-on: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Install requirements
        run: |
          pip3 install --user check-manifest twine

      - name: Install brew
        run: |
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          brew install libffi libheif

      - name: Run check-manifest
        run: |
          python3 -m check_manifest

      - name: Build sdist
        run: |
          python3 -m pip install --upgrade pip setuptools wheel
          python3 -m pip install -r requirements.txt
          python3 -m pip install -r requirements_dev.txt
          python3 -m build --sdist --outdir wheelhouse

      - name: Install from sdist
        run: |
          pip3 install --user wheelhouse/*.tar.gz

      - name: Check sdist
        run: |
          python3 -m twine check wheelhouse/*

      - name: Upload sdist
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: wheelhouse/*.tar.gz

  draft_release:
    needs: [sdist, wheels_linux, wheels_macos]
    runs-on: ubuntu-latest
    name: Build and create release

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Get release info
        id: get_release_info
        run: |
          RELEASE_VERSION=$(sed -n "s/^__version__.*\"\(.*\)\"$/\\1/p" ./pillow_heif/_version.py)
          echo "::set-output name=version::v${RELEASE_VERSION}"
          echo "::set-output name=tag::v${RELEASE_VERSION}"
          CHANGELOG=$(grep -oPz "(?s)##\s\[$RELEASE_VERSION.+?(?=##\s\[|$)" ./CHANGELOG.md | tr -d '\0' | sed /^$/d | sed '1d')
          CHANGELOG=$(echo "$CHANGELOG" | sed '$!N;s/^###.*\n#/#/;P;D' | sed '$!N;s/^###.*\n#/#/;P;D' | sed '${/^###/d;}')
          if [ "$CHANGELOG" == "" ]; then
            echo "changelog is empty!"
            exit 1
          fi
          echo "CHANGELOG<<EOF" >> $GITHUB_ENV
          echo "$CHANGELOG" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Collect sdist and wheels
        uses: actions/download-artifact@v2
        with:
          name: wheels
          path: wheelhouse

      - name: Create release draft
        uses: ncipollo/release-action@v1.8.8
        with:
          name: ${{ steps.get_release_info.outputs.version }}
          tag: ${{ steps.get_release_info.outputs.tag }}
          commit: ${{ github.ref }}
          draft: true
          body: ${{ env.CHANGELOG }}
          artifacts: wheelhouse/*
          token: ${{ secrets.GITHUB_TOKEN }}
          artifactErrorsFailBuild: true
